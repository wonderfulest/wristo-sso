---
description: 
globs: 
alwaysApply: false
---
# SSO 统一前端登录/注册

1. 避免重复建设
- 多个系统各自实现登录/注册页面会导致开发、维护、测试工作重复；
- 前端样式、逻辑差异可能引发用户体验不一致。

2. 提升用户体验
- 统一风格、统一流程，用户在多个子系统之间切换不会感到割裂；
- 登录后直接跳转目标系统，无需重新认证。

3. 利于权限与认证逻辑集中管理
- 登录/注册页面中可能涉及验证码、密码策略、OAuth、短信验证等复杂逻辑；
- 集中后这些机制更易统一更新和升级（如接入扫码登录、人脸识别等）。

4. 便于安全管控
- 登录页是攻击的重点对象之一，集中化可加强防护（如滑动验证码、设备指纹、行为风控）；
- 注册页也涉及风控和反作弊，统一后更便于部署统一策略。

✅ 常见的统一实现方式：
| 模式                                 | 描述                                                                         |
| ---------------------------------- | -------------------------------------------------------------------------- |
| **独立前端 Web 应用**                    | SSO 提供一个独立的 login/signup Web 页面（如 `https://sso.xxx.com/login`），所有子系统重定向到这里 |                       |
| **OAuth2 / OpenID Connect + 跳转协议** | 各系统作为 OAuth Client 重定向到统一授权页，登录后带 token 跳转回去                               |

✅ 开发建议
- 前端统一代码库，模块化登录/注册/找回密码等流程；
- UI 层支持皮肤/配置（如不同品牌子系统）；
- 登录页配置支持从 URL 参数或后端 API 获取跳转目标、来源系统名；
- API 接口建议统一走 SSO 服务网关（如 /api/sso/login, /api/sso/register）；

✅ 总结一句话：

登录/注册作为 SSO 的核心功能，强烈建议集中建设前端页面，实现逻辑和风格统一，避免重复开发与维护。
