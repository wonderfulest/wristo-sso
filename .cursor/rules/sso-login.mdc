---
description: 
globs: 
alwaysApply: false
---
# SSO 时序图

用户            dashboard前端       dashboard后端       SSO服务         用户信息服务
│                  │                    │                 │                 │
│── 访问 dashboard ─▶│                  │                 │                 │
│                  │── 检查未登录 ─────▶│                 │                 │
│                  │◀──── 重定向至 SSO 登录页（带redirect_uri） ─────────────┘
│◀──── 跳转至 ─────│                    │                 │
│    SSO 登录页（Authorization Endpoint）                │
│                  │                    │                 │
│── 输入用户名密码 →│                    │                 │
│                  │                    │── 验证用户信息 ─▶│                 │
│                  │                    │◀──── 登录成功 ──│                 │
│◀──── 登录成功跳转 redirect_uri?code=abc123 ─────────────┘
│                  │                    │                 │
│                  │── code 发送给后端 ─▶│                 │
│                  │                    │── POST /token（带 code） ────────▶│
│                  │                    │                 │── 校验 code、生成 token ─▶│
│                  │                    │                 │◀──────── 返回 access_token,id_token ──│
│                  │                    │◀──── 返回 token ──────────────────│
│◀──── 页面加载成功 │                    │                 │
│                  │                    │── GET /userinfo（带 token） ─────▶│
│                  │                    │◀──── 返回用户信息 ────────────────│
│◀──── 渲染页面 │                    │                 │


# sso系统如何为其他系统提供鉴权

用户在 sso.wristo.io 登录后，如何安全地跳转并携带 token 给 dashboard.wristo.io、merchant.wristo.io 等子系统，是 SSO 的关键设计问题。

✅ 推荐的方式：基于 OAuth2 / OpenID Connect（OIDC）

1. SSO 作为授权服务器（Authorization Server）

用户访问 dashboard.wristo.io → 检查未登录 → 重定向至 sso.wristo.io/login?redirect_uri=https://dashboard.wristo.io/auth/callback

2. 登录成功后，SSO 签发一个带有 token 的跳转 URL：

https://dashboard.wristo.io/auth/callback?code=abc123

3. dashboard 后端通过 code 向 SSO 后台接口（Token Endpoint）换取 Access Token：

```
POST https://sso.wristo.io/oauth/token
Content-Type: application/x-www-form-urlencoded

grant_type=authorization_code
code=abc123
client_id=dashboard
client_secret=xxx
redirect_uri=https://dashboard.wristo.io/callback
```

返回：

```
{
  "access_token": "eyJhbGci...",
  "expires_in": 3600,
  "refresh_token": "....",
  "token_type": "Bearer",
  "id_token": "...."
}
```

子系统开始使用 token 进行用户鉴权。

✅ 核心组成模块

| 模块                         | 说明                                |
| -------------------------- | --------------------------------- |
| **SSO 登录页**                | 统一登录页面，用户输入账号密码，或扫码登录等            |
| **Authorization Endpoint** | 接收来自 dashboard 等系统的跳转请求，登录成功后回跳   |
| **Token Endpoint**         | 子系统拿 `code` 来换取 Access Token      |
| **User Info Endpoint**     | 子系统用 Access Token 获取用户信息（如头像、角色等） |

✅ 子系统的接入逻辑简化版

1. 用户访问 dashboard.wristo.io
2. 检查是否已登录
   - 没登录 → 重定向到 SSO
3. SSO 登录成功 → redirect 回 dashboard（带 code）
4. dashboard 后端 → SSO 换取 token
5. token 存入 cookie / localStorage
6. 开始渲染页面


✅ Token 格式（通常是 JWT）

```
{
  "sub": "user_id_123",
  "email": "abc@wr.com",
  "exp": 1712345678,
  "roles": ["admin"],
  "iss": "sso.wristo.io"
}
```

- 子系统可以校验签名 + 解出用户信息
- 可设置 token 过期、refresh token 等机制


✅ 安全建议

- 强制使用 HTTPS
- 使用短时效 code 换 token，防止泄露
- 不建议将 token 明文放在 URL 中（推荐通过后端换取 token）
- 跨域通信时注意设置 SameSite=None; Secure 的 Cookie 策略


✅ 替代方案（不推荐）

Cookie 共享域方案（如 .wr.com）
- 在顶级域上设置 Cookie（domain=.wr.com）使子域共享
- 只能在同一主域下使用（如 sso.wr.com、dashboard.wr.com）
- 不适用于跨主域（如 sso.wristo.io 与 merchant.partner.io）

✅ 总结一句话：
使用 OAuth2 + OpenID Connect，是现代 SSO 系统给多个子系统发放 token 的标准方式，安全、可扩展、被广泛采用（如 Google、GitHub 登录）。





